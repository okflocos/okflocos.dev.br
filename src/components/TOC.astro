---
const { headings } = Astro.props as {
  headings: Array<{
    depth: number
    slug: string
    text: string
  }>
}
// @ts-ignore
const { frontmatter } = Astro.props as {
  title: string
}

const { minutesRead } = Astro.props.frontmatter

function getIcon(depth: number) {
  switch (depth) {
    case 1:
      return 'icon-h-1'
    case 2:
      return 'icon-h-2'
    case 3:
      return 'icon-h-3'
    case 4:
      return 'icon-h-4'
    default:
      return 'icon-h-5'
  }
}

function removeFirstCharAndSpace(title: string) {
  if (typeof title === 'string' && title.length > 1) {
    const firstChar = title.charCodeAt(0)
    if (firstChar >= 0xd800 && firstChar <= 0xdbff) {
      return title.substring(2).trim()
    } else {
      return title.substring(1).trim()
    }
  }
  return title
}

function convertToChineseTime(timeString: string) {
  const timePattern =
    /(\d+)\s*(min|minute|min\s+read|分钟\s+阅读|hr|hour|hour\s+read|小时\s+阅读|day|天|week|周|month|月|year|年)\s*(read)?/i
  const match = timeString.match(timePattern)

  if (match) {
    const value = parseInt(match[1])
    const unit = match[2].toLowerCase()
    let chineseUnit

    switch (unit) {
      case 'min':
      case 'minute':
        chineseUnit = '分钟'
        break
      case 'hr':
      case 'hour':
        chineseUnit = '小时'
        break
      case 'day':
        chineseUnit = '天'
        break
      case 'week':
        chineseUnit = '周'
        break
      case 'month':
        chineseUnit = '月'
        break
      case 'year':
        chineseUnit = '年'
        break
      default:
        chineseUnit = '无法识别的单位'
    }

    return `${value} ${chineseUnit}`
  }

  return '无法识别的时间格式'
}
---

{
  headings.length ? (
    <div class="anchor sticky-module fixed sm:px-10 anchor-catalogue lg:inline-block w-60 catalogue" data-pagefind-ignore>
      <button class="header" title="高高山上走" data-pagefind-ignore>
        <div class="title">{removeFirstCharAndSpace(frontmatter.title)}</div>
        {frontmatter.title && frontmatter.language  ? (
          <div class="read" data-pagefind-ignore>
            {frontmatter.language}，共 {minutesRead.words} 字，需阅读 {convertToChineseTime(minutesRead.text)}
          </div>
        ) : null}
      </button>
      <ol class="catalogue " data-pagefind-ignore>
        {headings.map((heading, index) => (
          <li>
            <a
              class={`toc-link text-gray-500 hover:text-gray-900 text-sm mb-2 ${
                heading.depth > 2 ? 'ml-4' : ''
              }`}
              href={`#${heading.slug}`}
            >
              <i class={`toc-icon iconfont ${getIcon(heading.depth)}`} />
              <span class="truncated-title text">{heading.text}</span>
            </a>
          </li>
        ))}
      </ol>
    </div>
  ) : null
}

<style>
  .catalogue {
    max-height: 36rem;
    padding: 0.618rem 1rem;
    padding-left: 0;
    overflow-y: auto;
    scroll-snap-type: y mandatory;
  }

  .anchor {
    border: 1px dashed #abaaaa;
    padding: 1rem;
    display: flex;
    flex-direction: column;
  }

  .anchor .header {
    display: block;
    width: 100%;
    border: 1px dashed #abaaaa;
    border-radius: 4px;
    text-align: left;
  }

  .anchor .catalogue li {
    margin: 0;
    padding: 0;
  }

  .toc-link {
    display: flex;
    align-items: center;
    text-decoration: none;
  }

  .toc-link .toc-icon {
    margin-right: 8px;
  }

  ul,
  ol {
    padding-left: 3em;
    vertical-align: baseline;
  }

  .catalogue li {
    border-bottom: 1px dashed var(--module-bg-darker-2);
    overflow: hidden;
  }

  .truncated-title {
    white-space: nowrap;
  }
  .text {
    text-decoration: underline;
    text-underline-offset: 0.4em;
    text-decoration-thickness: from-font;
    text-decoration-style: dotted;
  }

  .header {
    display: flex;
    flex-shrink: 0;
    height: 4rem;
    line-height: 25px;
    padding-left: 3px;
    padding-right: 3px;
  }

  .anchor .header .title {
    font-weight: 700;
    font-size: 15px;
    overflow: hidden;
  }

  .anchor .header .read {
    font-size: 11px;
  }
</style>
